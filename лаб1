print("Task1.1")
print(f"{4} {8} {15} {16} {23} {42}")
print("Task1.2")
print(f"{4}\n{8}\n{15}\n{16}\n{23}\n{42}")
print ("Task1.3")
try:
    # Get the first number from the user
    num1 = int(input("Enter the first number: "))

    # Calculate the second and third numbers
    num2 = num1 + 1
    num3 = num1 + 2

    # Display the consecutive numbers on separate lines
    print(f"The consecutive numbers are:")
    print(num1)
    print(num2)
    print(num3)

except ValueError:
    print("Invalid input. Please enter a valid integer.")

except Exception as e:
    print(f"An error occurred: {e}")

print("Task1.4")
# Считываем три целых числа, каждое с новой строки
num1 = int(input("Введите первое целое число: "))
num2 = int(input("Введите второе целое число: "))
num3 = int(input("Введите третье целое число: "))

# Считаем сумму трех чисел
total = num1 + num2 + num3

# Выводим сумму на экран
print("Сумма трех чисел:", total)
print("Task1.5")
num=int(input("Please enter a valid integer"))
v=num*num*num
v2=6*num*num
print("cube",v)
print("surface",v2)
print("Task 2.1")
schol=int(input("schol"))
integ=int(input("integ"))
print (integ/schol)
print(integ%schol)
print("Task 2.2")
number=int(input("num"))

if 9999<number>1000:
    n1 = number // 1000
    n2 = (number // 100) % 10
    n3 = (number % 100) // 10
    n4 = number % 10
    print('Цифра в позиции тысяч равна', n1)
    print('Цифра в позиции сотен равна', n2)
    print('Цифра в позиции десятков равна', n3)
    print('Цифра в позиции единиц равна', n4)
else:
    print("ERROR")
    print("Task2.3")
    population = int(input("Enter the population of the universe: "))

    # Check if the population is even or odd
    if population % 2 == 0:
        # If the population is even, Thanos will destroy half of it
        survivors = population // 2
    else:
        # If the population is odd, Thanos will round up the number of survivors
        survivors = (population // 2) + 1

    # Display the number of survivors
    print(f"Number of survivors: {survivors}")
    print("Task 2.4")
    # Get a number as input from the user
    num = int(input("Enter a number: "))

    # Perform the left shift operation
    result = num << 1

    # Check if the result is zero
    if result == 0:
        print("Warning: The result is zero.")
    else:
        print(f"The result of the left shift (<<) operation is: {result}")
        print("task2.5")
        num1 = float(input("Enter the first number: "))
        num2 = float(input("Enter the second number: "))

        # Ask the user to choose an operation
        print("Choose an operation:")
        print("1. Addition")
        print("2. Subtraction")
        print("3. Multiplication")
        print("4. Division")
        choice = input("Enter the operation number (1/2/3/4): ")

        # Perform the selected operation and display the result
        if choice == "1":
            result = num1 + num2
            print(f"The result of addition is: {result}")
        elif choice == "2":
            result = num1 - num2
            print(f"The result of subtraction is: {result}")
        elif choice == "3":
            result = num1 * num2
            print(f"The result of multiplication is: {result}")
        elif choice == "4":
            if num2 == 0:
                print("Division by zero is not allowed.")
            else:
                result = num1 / num2
                print(f"The result of division is: {result}")
        else:
            print("Invalid choice. Please enter a valid operation number (1/2/3/4).")

Task 1.1: This task prints the numbers 4, 8, 15, 16, 23, and 42 on the same line, separated by spaces. The f-string syntax is used to format the output. 
# Task 1.2: This task prints the same numbers as Task 1.1, but on separate lines. The \n character is used to create a new line in the output. 
# Task 1.3: This task asks the user to enter a number and then displays three consecutive numbers starting from that number. For example, if the user enters 5, the output will be 5, 6, and 7. The try-except block is used to handle any errors that might occur, such as invalid input or other exceptions. 
# Task 1.4: This task asks the user to enter three integers and then displays their sum. The input function is used to get the user input and the int function is used to convert it to an integer. The + operator is used to add the numbers together. 
# Task 1.5: This task asks the user to enter a valid integer and then displays the cube and the surface area of a cube with that side length. The ** operator is used to raise a number to a power and the * operator is used to multiply two numbers. 
# Task 2.1: This task asks the user to enter two numbers: schol and integ. Then it displays the result of dividing integ by schol and the remainder of that division. The / operator is used for division and the % operator is used for modulo (remainder). 
# Task 2.2: This task asks the user to enter a four-digit number and then displays each digit in its corresponding position (thousands, hundreds, tens, ones). For example, if the user enters 1234, the output will be: 
# Цифра в позиции тысяч равна 1 Цифра в позиции сотен равна 2 Цифра в позиции десятков равна 3 Цифра в позиции единиц равна 4 
 
# The // operator is used for integer division and the % operator is used for modulo (remainder). The if-else block is used to check if the number is between 1000 and 9999, otherwise it prints an error message. 
 
# Task 2.3: This task asks the user to enter the population of the universe and then displays how many survivors there will be after Thanos snaps his fingers and destroys half of all life. If the population is even, then half of it will survive. If the population is odd, then Thanos will round up the number of survivors. For example, if the population is 7, then there will be 4 survivors. The if-else block is used to check if the population is even or odd using the % operator. 
# Task 2.4: This task asks the user to enter a number and then displays the result of performing a left shift operation on that number. A left shift operation means moving all the bits in a binary representation of a number one position to the left and filling in a zero on the right. For example, if the number is 5, which is 101 in binary, then a left shift operation will result in 10, which is 1010 in binary. The << operator is used for left shift operation in Python. The if-else block is used to check if the result is zero, which means that all the bits in the original number were zeros or were shifted out of range. 
# Task 2.5: This task asks the user to enter two numbers and then choose an operation from a menu (addition, subtraction, multiplication, or division). Then it displays the result of performing that operation on those numbers. For example, if the user enters 3 and 4 and chooses addition, then the output will be:
