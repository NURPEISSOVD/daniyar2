# TASK 1.1

# Записываю строку в переменную
user_input = input("Enter a string without whitespaces: ")
# удаляю все пробелы
user_input = user_input.replace(" ", "") 
# конвертирование в картеж
my_tuple = tuple(user_input)
# вывожу в терминал
print(f"TASK 1.1 - Created tuple is: {my_tuple}")


# TASK 1.2
# join обьеденяет по пустым строкам все элементы картежа
print(f'TASK 1.2 - The string is: {"".join(my_tuple)}')


# TASK 1.3
tuple_A = (1, 2, 3, 4, 5, 6, 7)
tuple_B = (5, 6, 7, 9, 7, 1, 10, 10)

# len() дает длину строку. что бы получить половину мы разделяем на 2. 
# int() дает нам целое число без запятой. просто если поделить на 2 то может получиться 0.5 и индекс не может быть float
split_index_A = int(len(tuple_A)/2) 
split_index_B = int(len(tuple_B)/2)

# добавляю первые элементы до split_index_A с первого кортежа и элементы начиная с индекса split_index_B до конца
result_tuple = tuple_A[:split_index_A] + tuple_B[split_index_B:]
# вывожу в терминал
print(f'TASK 1.3 - The new tuple is: {result_tuple}')


# TASK 1.4
input_tuple = (55, 6, 777, 54, 6, 76, 7777, 1, 777, 6)
# input_tuple = ('55', '6', '777', 54, 6, 7777, 9, 777, 6)
# input_tuple = ((1, 2, 3), ('A', 'B', 1), (1, 2, 3), ('A', 1))

# создаем пустой словарь что бы в будущем туда кидать данные
element_count = {}
# пробегаемся по заданному кортежу
for item in input_tuple:
    # я беру эллемент кортежа как ключь и как значение пишу каунтер
    # слово in это логический оператор в питоне который говорит есть ли данный элемент в картеже или нет
    # если элемент есть то True
    # если элемент нет то False
    if item in element_count:
        element_count[item] += 1
    else:
        element_count[item] = 1
# в конце генерируем новый картеж
element_occurrences = [(key, value) for key, value in element_count.items()]
print(f"Elements and their occurrences: {element_occurrences}")


# TASK 1.5
data = (55, 6, 777, 70.0, '7', 'A')
integers = tuple(item for item in data if isinstance(item, int))
floats = tuple(item for item in data if isinstance(item, float))
strings = tuple(item for item in data if isinstance(item, str))
print(integers)
print(floats)
print(strings)
# print("TASK 2.1")
# s1 = 'TheBigBen'
# print("Sample Output :")
# print("Created set is:")
# print({c for c in s1})
# print("выражение {c for c in s1} для создания множества, содержащего все уникальные символы в строке s1.")
# print("TASK 2.2")
# set_A = {1,2,3,4,5}
# set_B = {5,7,8,9,2,10}
#
# print("Sample Output 1:")
# print(set_A.symmetric_difference(set_B))
# print(" print() код выводит симметричную разницу set_A и set_B, которая представляет собой набор элементов, которые находятся либо в set_A, либо в set_B, но не в обоих.")
# print("TASK 2.3")
#
# set_A = {1,2,3,4,5}
# set_B = {5,7,8,9,2,10}
#
# print("Sample Output 1:")
# print(set_A - set_B)
# print("мы создаем множества set_A и set_B. Затем мы используем оператор -, чтобы вычислить разность между множествами set_A и set_B.")
# print("TASK 2.4")
# set_A = {1, 2, 3, 4, 7}
# set_B = {8, 7, 9, 4, 2, 0, 10}
# set_C = {4, 0, 1}
#
# for element in set_C:
#     if element in set_A:
#         set_A.remove(element)
#         set_B.add(element)
#
# print("Updated set_C =", set_C)
# print("три набора set_A, set_B и set_C. Затем мы используем цикл for для перебора каждого элемента в set_C. Если текущим элементом является inset_A, мы удаляем его из set_A и добавляем в set_B.  print() для отображения обновленного set_C")
# print("TASK2.5")
# import itertools
#
# A = {1,2,3,4,5,6}
# n = 3
# m = 5
# result = [set(combo) for combo in itertools.combinations(A, n)][:m]
# print("Sample Output 1:")
# print(result)
# print(" A и два целых числа n и m. Затем код использует функцию combinations() из модуля itertools для генерации всех возможных комбинаций из n элементов из A. Затем код выбирает первые m комбинаций из списка всех возможных комбинаций и сохраняет их в новом списке, называемом result.код выводит содержимое результата.")
# # print("TASK 3.1")
# from collections import defaultdict
# cars_list = [('BMW', 'X6'), ('Toyota', 'Yaris'), ('Fiat', '500'), ('Fiat', 'Panda'), ('Toyota', 'Camry 30')]
# print("Sample Input 1:")
# print(cars_list)
# groups = defaultdict(list)
# for manufacturer, model in cars_list:
#     groups[manufacturer].append(model)
# print("Sample Output 1:")
# for manufacturer, models in groups.items():
#     print(f"{manufacturer} {len(models)}")
#     for model in models:
#         print(f"- {model}")
# print("В первых двух строках мы импортируем класс defaultdict из модуля collections и создаем список cars_list. Затем мы используем цикл for, чтобы перебрать каждый элемент в списке cars_list. В каждой итерации цикла мы добавляем текущую модель автомобиля в список моделей для текущего производителя автомобиля в словаре groups.for, чтобы перебрать каждый элемент в словаре groups. В каждой итерации цикла мы выводим на экран количество моделей для текущего производителя автомобиля, а затем перебираем каждую модель автомобиля и выводим ее на экран.")
