print("TASK 1")
N = int(input("Enter a positive integer (N): "))

# Initialize a counter
i = 1

# Use a while loop to print even numbers
while i <= N:
    if i % 2 == 0:
        print(i)
    i += 1
print("TASK 2")
N = int(input("Введите целое положительное число (N): "))

# Инициализация переменных
fact = 1  # Инициализируем факториал значением 1
i = 1

# Используем цикл while для вычисления факториала
while i <= N:
    fact *= i  # Умножаем текущее значение факториала на i
    i += 1

# Вывод результата
print(f"Факториал числа {N} равен {fact}")
print("TASK 3")
while True:
    number = int(input("Введите число (или 0 для завершения): "))
    
    if number == 42:
        print("Число 42 найдено. Программа завершена.")
        break
    
    if number == 0:
        print("Программа завершена.")
        break
print("TASK 4")
# Запрос ввода строки от пользователя
input_string = input("Введите строку: ")

# Инициализация счетчика
count_a = 0

# Перебор символов в строке и подсчет букв "а"
for char in input_string:
    if char == "а" or char == "А":  # Подсчитываем как маленькие, так и большие буквы "а"
        count_a += 1

# Вывод результата
print(f"Количество букв 'а' в строке: {count_a}")
print("TASK 4")
input_string = input("Введите строку: ")

# Инициализация счетчика
count_a = 0

# Перебор символов в строке и подсчет букв "а"
for char in input_string:
    if char == "а" or char == "А":  # Подсчитываем как маленькие, так и большие буквы "а"
        count_a += 1

# Вывод результата
print(f"Количество букв 'а' в строке: {count_a}")
print("TASK 5")
# Запрос ввода числа от пользователя
number_str = input("Введите число: ")

# Инициализация суммы
total = 0

# Перебор цифр в строке и суммирование
for digit in number_str:
    if digit.isdigit():  # Проверка, является ли символ цифрой
        total += int(digit)  # Преобразование символа в целое число и сложение

# Вывод результата
print(f"Сумма цифр в числе: {total}")
print("TASK 6")
N = int(input("Введите целое положительное число (N): "))

# Инициализация переменных для первых двух чисел Фибоначчи
a, b = 0, 1

# Счетчик
count = 0

# Используем цикл while для печати первых N чисел Фибоначчи
while count < N:
    print(a, end=" ")  # Вывод текущего числа Фибоначчи
    a, b = b, a + b  # Обновление переменных для следующего числа Фибоначчи
    count += 1
print("TASK 7")
input_string = input("Введите строку: ")

# Используем срез с отрицательным шагом (-1) для переворота строки
reversed_string = input_string[::-1]

# Вывод результата
print("Перевернутая строка:", reversed_string)
print("TASK 8")
# Инициализация переменной для хранения суммы нечетных чисел
odd_sum = 0

while True:
    number = int(input("Введите число (или 0 для завершения): "))
    
    if number == 0:
        break  # Выход из цикла при вводе 0
    
    if number % 2 == 0:
        continue  # Пропускаем четные числа
    
    odd_sum += number  # Добавляем нечетные числа к сумме

print(f"Сумма нечетных чисел: {odd_sum}")
print("TASK 9")
import random

# Генерация случайного числа от 1 до 100
secret_number = random.randint(1, 100)

# Инициализация счетчика попыток
attempts = 0

while True:
    guess = int(input("Угадайте число от 1 до 100: "))
    attempts += 1
    
    if guess < secret_number:
        print("Слишком маленькое.")
    elif guess > secret_number:
        print("Слишком большое.")
    else:
        print(f"Поздравляем! Вы угадали число {secret_number} за {attempts} попыток.")
        break
print("TASK 10")
# Запрос ввода строки от пользователя
input_string = input("Введите строку: ")

# Убираем пробелы и приводим к нижнему регистру для более точной проверки
input_string = input_string.replace(" ", "").lower()

# Создаем перевернутую версию строки
reversed_string = input_string[::-1]

# Проверяем, является ли строка палиндромом
if input_string == reversed_string:
    print("Это палиндром.")
else:
    print("Это не палиндром.")
print("TASK 11")
# Запрос ввода числа X и степени Y от пользователя
X = float(input("Введите число X: "))
Y = int(input("Введите степень Y: "))

# Инициализация результата
result = 1

# Используем цикл while для вычисления X в степени Y
while Y > 0:
    result *= X  # Умножаем результат на X
    Y -= 1  # Уменьшаем степень Y

# Вывод результата
print(f"{X} в степени {Y} равно {result}")
print("TASK 12")
# Ввод от пользователя
N = int(input("Введите целое положительное число (N): "))

print("Простые числа от 1 до", N, "с использованием конструкции Break:")

# Первые два простых числа
if N >= 2:
    print(2)

number = 3  # Начинаем с проверки числа 3

while number <= N:
    is_prime = True

    for divisor in range(2, int(number ** 0.5) + 1):
        if number % divisor == 0:
            is_prime = False
            break

    if is_prime:
        print(number)

    number += 2  # Переходим к следующему нечетному числу
print("TASK 13")
# Запрос ввода числа от пользователя
number = input("Введите число: ")

# Переворачиваем введенную строку (число) и выводим
reversed_number = number[::-1]

print("Число в обратном порядке:", reversed_number)
print("TASK 14")
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False

    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6

    return True

# Ввод от пользователя
number = int(input("Введите число: "))

while True:
    if is_prime(number):
        print(f"{number} - это простое число.")
        break
    else:
        print(f"{number} не является простым числом.")
        number += 1  # Переход к следующему числу
print("TASK 15")
# Функция для шифрования строки с помощью шифра Цезаря
def caesar_cipher(text, shift):
    encrypted_text = ""

    for char in text:
        if char.isalpha():
            is_upper = char.isupper()
            char = char.lower()
            shifted_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))
            if is_upper:
                shifted_char = shifted_char.upper()
            encrypted_text += shifted_char
        else:
            encrypted_text += char

    return encrypted_text

# Запрос ввода строки и смещения от пользователя
input_string = input("Введите строку: ")
shift = int(input("Введите смещение (целое число N): "))

# Шифрование строки
encrypted_string = caesar_cipher(input_string, shift)

# Вывод зашифрованной строки
print("Зашифрованная строка:", encrypted_string)
